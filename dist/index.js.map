{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./EventAggregator.ts","webpack:///./index.ts","webpack:///./ECS.ts","webpack:///./Ecs.ts","webpack:///./EcsComponent.ts","webpack:///./EcsEntity.ts","webpack:///./EcsSystem.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","EventAggregator","topics","[object Object]","eventName","args","this","forEach","callback","push","default","ECS_1","__export","ecs","ECS","console","log","EventAggregator_1","isRunning","entities","systems","inactiveSystems","afterUpdateEvents","_subscribe","delta","system","tick","_afterSystemsUpdate","_removeMarkedEntities","newEntity","id","_nextId","_runOrPushToAfterUpdateStack","_addEntity","entityId","_removeEntity","newSystem","_addSystem","systemId","_removeSystem","systemIndex","findIndex","splice","publish","entityIndex","entity","replace","Math","random","toString","subscribe","filter","shouldBeRemoved","removeEntity","EcsComponent","_type","EcsEntity","components","remove","componentTypes","component","componentType","find","Error","EcsSystem","isActive","systemEntities","active","_isEntityForSystem","some","hasComponent","systemEntity"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","const EventAggregator = {\n    topics: {},\n    publish(eventName: string, ...args: any) {\n        if (!this.topics[eventName]) {\n            return;\n        }\n\n        this.topics[eventName].forEach((callback: Function) => {\n            callback(...args);\n        });\n    },\n    subscribe(eventName: string, callback: Function) {\n        if (!this.topics[eventName]) {\n            this.topics[eventName] = [];\n        }\n\n        this.topics[eventName].push(callback);\n    }\n}\n\nexport default EventAggregator;","import { ECS } from './ECS';\n\nexport * from './Ecs';\nexport * from './EcsComponent';\nexport * from './EcsEntity';\nexport * from './EcsSystem';\n\nlet ecs = new ECS();\n\nconsole.log(ecs);","import EventAggregator from './EventAggregator';\n\nimport { EcsEntity } from './EcsEntity';\nimport { EcsSystem } from './EcsSystem';\n\nexport class ECS {\n    private isRunning: boolean = false;\n\n    private entities: Array<EcsEntity> = [];\n    private systems: Array<EcsSystem> = [];\n    private inactiveSystems: Array<EcsSystem> = [];\n\n    private afterUpdateEvents: Array<Function> = [];\n\n    constructor() {\n        this._subscribe();\n    }\n\n    update (delta: number) {\n        this.isRunning = true;\n        this.systems.forEach((system) => {\n            system.tick(delta);\n        });\n        this._afterSystemsUpdate();\n        this._removeMarkedEntities();\n    }\n\n    addEntity(newEntity: EcsEntity) {\n        newEntity.id = this._nextId();\n        this._runOrPushToAfterUpdateStack(this._addEntity, newEntity);\n\n        return newEntity.id;\n    }\n\n    removeEntity(entityId: string) {\n        this._runOrPushToAfterUpdateStack(this._removeEntity, entityId);\n    }\n\n    addSystem(newSystem: any) {\n        newSystem.id = this._nextId();\n        this._runOrPushToAfterUpdateStack(this._addSystem, newSystem);\n\n        return newSystem.id;\n    }\n\n    removeSystem(systemId: string) {\n        this._runOrPushToAfterUpdateStack(this._removeSystem, systemId);\n    }\n\n    // importStateFromJSON() { }\n    // exportStateToJSON() { }\n\n    private _runOrPushToAfterUpdateStack(callback: Function, ...args: any[]) {\n        callback = callback.bind(this);\n        if (!this.isRunning) {\n            callback(...args);\n        } else {\n            this.afterUpdateEvents.push(() => callback(...args));\n        }\n    }\n\n    private _addSystem(newSystem: EcsSystem) {\n        this.systems.push(newSystem);\n    }\n\n    private _removeSystem(systemId: string) {\n        let systemIndex = this.systems.findIndex((system: EcsSystem) => systemId === system.id);\n\n        if (!systemIndex) {\n            systemIndex = this.inactiveSystems.findIndex((system: EcsSystem) => systemId === system.id);\n        }\n\n        this.systems.splice(systemIndex, 1);\n    }\n\n    private _addEntity(newEntity: EcsEntity) {\n        this.entities.push(newEntity);\n        EventAggregator.publish('onCreateEntity', newEntity);\n    }\n\n    private _removeEntity(entityId: string) {\n        let entityIndex = this.entities.findIndex((entity) => {\n            return entity.id === entityId;\n        });\n\n        if (entityIndex < 0) {\n            return;\n        }\n\n        this.entities.splice(entityIndex, 1);\n        EventAggregator.publish('onRemoveEntity', entityId);\n    }\n\n    private _afterSystemsUpdate () {\n        this.afterUpdateEvents.forEach((callback) => {\n            callback();\n        });\n\n        this.afterUpdateEvents = [];\n    }\n\n    private _nextId () {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            let r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n\n    private _subscribe ( ) {\n        EventAggregator.subscribe('onDisableSystem', (systemId: string) => {\n            this._runOrPushToAfterUpdateStack(() => {\n                let systemIndex = this.systems.findIndex((system: EcsSystem) => {\n                    return system.id === systemId;\n                });\n\n                this.inactiveSystems.push(this.systems[systemIndex]);\n                this.systems.splice(systemIndex, 1);\n            });\n        });\n\n        EventAggregator.subscribe('onEnableSystem', (systemId: string) => {\n            this._runOrPushToAfterUpdateStack(() => {\n                let systemIndex = this.inactiveSystems.findIndex((system: EcsSystem) => {\n                    return system.id === systemId;\n                });\n\n                this.systems.push(this.inactiveSystems[systemIndex]);\n                this.inactiveSystems.splice(systemIndex, 1);\n            });\n        });\n    }\n\n    private _removeMarkedEntities() {\n        const markedToRemoveEntities = this.entities.filter((entity: EcsEntity) => entity.shouldBeRemoved());\n        markedToRemoveEntities.forEach((entity: EcsEntity) => {\n            this.removeEntity(entity.id);\n        });\n    }\n\n    // for testing purposes\n    public __getEntities (): EcsEntity[] { return this.entities; }\n    public __getSystems (): EcsSystem[] { return this.systems; }\n    public __getInactiveSystems (): EcsSystem[] { return this.inactiveSystems; }\n}\n","import EventAggregator from './EventAggregator';\n\nimport { EcsEntity } from './EcsEntity';\nimport { EcsSystem } from './EcsSystem';\n\nexport class ECS {\n    private isRunning: boolean = false;\n\n    private entities: Array<EcsEntity> = [];\n    private systems: Array<EcsSystem> = [];\n    private inactiveSystems: Array<EcsSystem> = [];\n\n    private afterUpdateEvents: Array<Function> = [];\n\n    constructor() {\n        this._subscribe();\n    }\n\n    update (delta: number) {\n        this.isRunning = true;\n        this.systems.forEach((system) => {\n            system.tick(delta);\n        });\n        this._afterSystemsUpdate();\n        this._removeMarkedEntities();\n    }\n\n    addEntity(newEntity: EcsEntity) {\n        newEntity.id = this._nextId();\n        this._runOrPushToAfterUpdateStack(this._addEntity, newEntity);\n\n        return newEntity.id;\n    }\n\n    removeEntity(entityId: string) {\n        this._runOrPushToAfterUpdateStack(this._removeEntity, entityId);\n    }\n\n    addSystem(newSystem: any) {\n        newSystem.id = this._nextId();\n        this._runOrPushToAfterUpdateStack(this._addSystem, newSystem);\n\n        return newSystem.id;\n    }\n\n    removeSystem(systemId: string) {\n        this._runOrPushToAfterUpdateStack(this._removeSystem, systemId);\n    }\n\n    // importStateFromJSON() { }\n    // exportStateToJSON() { }\n\n    private _runOrPushToAfterUpdateStack(callback: Function, ...args: any[]) {\n        callback = callback.bind(this);\n        if (!this.isRunning) {\n            callback(...args);\n        } else {\n            this.afterUpdateEvents.push(() => callback(...args));\n        }\n    }\n\n    private _addSystem(newSystem: EcsSystem) {\n        this.systems.push(newSystem);\n    }\n\n    private _removeSystem(systemId: string) {\n        let systemIndex = this.systems.findIndex((system: EcsSystem) => systemId === system.id);\n\n        if (!systemIndex) {\n            systemIndex = this.inactiveSystems.findIndex((system: EcsSystem) => systemId === system.id);\n        }\n\n        this.systems.splice(systemIndex, 1);\n    }\n\n    private _addEntity(newEntity: EcsEntity) {\n        this.entities.push(newEntity);\n        EventAggregator.publish('onCreateEntity', newEntity);\n    }\n\n    private _removeEntity(entityId: string) {\n        let entityIndex = this.entities.findIndex((entity) => {\n            return entity.id === entityId;\n        });\n\n        if (entityIndex < 0) {\n            return;\n        }\n\n        this.entities.splice(entityIndex, 1);\n        EventAggregator.publish('onRemoveEntity', entityId);\n    }\n\n    private _afterSystemsUpdate () {\n        this.afterUpdateEvents.forEach((callback) => {\n            callback();\n        });\n\n        this.afterUpdateEvents = [];\n    }\n\n    private _nextId () {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            let r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n\n    private _subscribe ( ) {\n        EventAggregator.subscribe('onDisableSystem', (systemId: string) => {\n            this._runOrPushToAfterUpdateStack(() => {\n                let systemIndex = this.systems.findIndex((system: EcsSystem) => {\n                    return system.id === systemId;\n                });\n\n                this.inactiveSystems.push(this.systems[systemIndex]);\n                this.systems.splice(systemIndex, 1);\n            });\n        });\n\n        EventAggregator.subscribe('onEnableSystem', (systemId: string) => {\n            this._runOrPushToAfterUpdateStack(() => {\n                let systemIndex = this.inactiveSystems.findIndex((system: EcsSystem) => {\n                    return system.id === systemId;\n                });\n\n                this.systems.push(this.inactiveSystems[systemIndex]);\n                this.inactiveSystems.splice(systemIndex, 1);\n            });\n        });\n    }\n\n    private _removeMarkedEntities() {\n        const markedToRemoveEntities = this.entities.filter((entity: EcsEntity) => entity.shouldBeRemoved());\n        markedToRemoveEntities.forEach((entity: EcsEntity) => {\n            this.removeEntity(entity.id);\n        });\n    }\n\n    // for testing purposes\n    public __getEntities (): EcsEntity[] { return this.entities; }\n    public __getSystems (): EcsSystem[] { return this.systems; }\n    public __getInactiveSystems (): EcsSystem[] { return this.inactiveSystems; }\n}\n","export class EcsComponent {\n    constructor(public _type: string) {}\n}\n","import { EcsComponent } from './EcsComponent';\n\ninterface IComponentTypes {\n    [key: string]: boolean\n};\n\nexport class EcsEntity {\n    public id: string = '';\n\n    private remove: boolean = false;\n    private components: Array<EcsComponent> = [];\n    private componentTypes: IComponentTypes = {};\n\n    constructor(components: EcsComponent[]) {\n        this.components = components;\n        this.components.forEach((component: EcsComponent) => {\n            this.componentTypes[component._type] = true;\n        });\n    }\n\n    markForRemove(): void {\n        this.remove = true;\n    }\n\n    shouldBeRemoved(): boolean {\n        return this.remove;\n    }\n\n    hasComponent(componentType: string): boolean {\n        return !!this.componentTypes[componentType];\n    }\n\n    getComponent(componentType: string): EcsComponent {\n        let component = this.components.find((component: EcsComponent) => {\n            return component._type === componentType;\n        });\n\n        if (!component) {\n            throw new Error(`Entity with id: ${this.id} doesn't have component: ${componentType}`);\n        }\n\n        return component;\n    }\n}\n","import EventAggregator from './EventAggregator';\n\nimport { EcsEntity } from './EcsEntity';\n\nexport abstract class EcsSystem {\n    public id: string = '';\n    private isActive: boolean = true;\n\n    protected systemEntities: Array<EcsEntity> = [];\n\n    abstract tick(delta: number): void;\n\n    constructor(\n        private componentTypes: Array<string>\n        ) {\n\n        this._subscribe();\n    }\n\n    setComponentTypes(componentTypes: Array<string>): void {\n        this.componentTypes = componentTypes;\n    }\n\n    setIsActive(active: boolean): void {\n        this.isActive = active;\n        EventAggregator.publish(active ? 'onEnableSystem' : 'onDisableSystem', this.id);\n    }\n\n    getIsActive(): boolean {\n        return this.isActive;\n    }\n\n    setEntities(entities: Array<EcsEntity>): void {\n        this.systemEntities = [];\n        this.systemEntities = entities.filter(this._isEntityForSystem.bind(this));\n    }\n\n    private _isEntityForSystem(entity: EcsEntity): boolean {\n        let isSystemEntity = this.componentTypes.some(componentType => {\n            return entity.hasComponent(componentType);\n        });\n\n        if (!isSystemEntity) {\n            return false;\n        }\n\n        let isAlreadyInSystem = this.systemEntities.some(systemEntity => entity.id === systemEntity.id);\n\n        if (isAlreadyInSystem) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private _subscribe(): void {\n        EventAggregator.subscribe('onCreateEntity', (entity: EcsEntity) => {\n            if (this._isEntityForSystem(entity)) {\n                this.systemEntities.push(entity);\n            }\n        });\n\n        EventAggregator.subscribe('onRemoveEntity', (entityId: string) => {\n            let entityIndex = this.systemEntities.findIndex((entity: EcsEntity) => {\n                return entity.id === entityId;\n            });\n\n            if (entityIndex < 0) {\n                return;\n            }\n\n            this.systemEntities.splice(entityIndex, 1);\n        });\n    }\n\n    // For testing\n    public __getComponentTypes() { return this.componentTypes; }\n    public __getSystemEntities() { return this.systemEntities; }\n}\n"],"sourceRoot":""}